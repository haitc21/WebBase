// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210601111828_initialDB")]
    partial class initialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.HasSequence("WebBase");

            modelBuilder.Entity("Entities.Entities.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("Entities.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ba7403d-9288-4661-9450-5e27d0d5e183"),
                            ConcurrencyStamp = "d4e46879-b035-426c-ac1c-8fc857509d24",
                            Description = "Admin role",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("412eb2fd-25a7-4293-b04b-14b5ad4bc6cc"),
                            ConcurrencyStamp = "9e86498b-3beb-4234-b8c4-a316eb79a596",
                            Description = "User role",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Entities.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09e9083f-69b6-499e-9eb0-723f2ec0a875"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "18e13a3e-2f75-4eed-bcd6-abf385eba8a0",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(2021, 6, 1, 18, 18, 27, 569, DateTimeKind.Local).AddTicks(1102),
                            Email = "hai.tc21@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Quản trị",
                            LastName = "tranhai",
                            LockoutEnabled = false,
                            PasswordHash = "aDMIN@123",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("60751aed-eb56-479d-adc6-7390248ff086"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89bff26a-175a-46b0-8c27-3679a77057af",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Dob = new DateTime(2021, 6, 1, 18, 18, 27, 569, DateTimeKind.Local).AddTicks(1102),
                            Email = "hai.tc21@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Trần",
                            LastName = "Hải",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "TranHai"
                        });
                });

            modelBuilder.Entity("Entities.Entities.Command", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Commands");

                    b.HasData(
                        new
                        {
                            Id = "VIEW",
                            Name = "Xem"
                        },
                        new
                        {
                            Id = "CREATE",
                            Name = "Thêm"
                        },
                        new
                        {
                            Id = "UPDATE",
                            Name = "Sửa"
                        },
                        new
                        {
                            Id = "DELETE",
                            Name = "Xoá"
                        },
                        new
                        {
                            Id = "APPROVE",
                            Name = "Duyệt"
                        });
                });

            modelBuilder.Entity("Entities.Entities.CommandInFunction", b =>
                {
                    b.Property<string>("CommandId")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FunctionId")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CommandId", "FunctionId");

                    b.HasIndex("FunctionId");

                    b.ToTable("CommandInFunctions");

                    b.HasData(
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "DASHBOARD"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "DASHBOARD"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "DASHBOARD"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "DASHBOARD"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "SYSTEM"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "SYSTEM"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "SYSTEM"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "SYSTEM"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "SYSTEM_USER"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "SYSTEM_USER"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "SYSTEM_USER"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "SYSTEM_USER"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "SYSTEM_ROLE"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "SYSTEM_ROLE"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "SYSTEM_ROLE"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "SYSTEM_ROLE"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "SYSTEM_FUNCTION"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "SYSTEM_FUNCTION"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "SYSTEM_FUNCTION"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "SYSTEM_FUNCTION"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            FunctionId = "SYSTEM_PERMISSION"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            FunctionId = "SYSTEM_PERMISSION"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            FunctionId = "SYSTEM_PERMISSION"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            FunctionId = "SYSTEM_PERMISSION"
                        });
                });

            modelBuilder.Entity("Entities.Entities.Function", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ParentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Functions");

                    b.HasData(
                        new
                        {
                            Id = "DASHBOARD",
                            Icon = "fa-dashboard",
                            Name = "DashBoard",
                            SortOrder = 1,
                            Url = "/dashboard"
                        },
                        new
                        {
                            Id = "SYSTEM",
                            Icon = "fa-th-list",
                            Name = "Hệ thống",
                            SortOrder = 0,
                            Url = "/systems"
                        },
                        new
                        {
                            Id = "SYSTEM_USER",
                            Icon = "fa-desktop",
                            Name = "Người dùng",
                            ParentId = "SYSTEM",
                            SortOrder = 0,
                            Url = "/systems/users"
                        },
                        new
                        {
                            Id = "SYSTEM_ROLE",
                            Icon = "fa-desktop",
                            Name = "Nhóm quyền",
                            ParentId = "SYSTEM",
                            SortOrder = 0,
                            Url = "/systems/roles"
                        },
                        new
                        {
                            Id = "SYSTEM_FUNCTION",
                            Icon = "fa-desktop",
                            Name = "Chức năng",
                            ParentId = "SYSTEM",
                            SortOrder = 0,
                            Url = "/systems/functions"
                        },
                        new
                        {
                            Id = "SYSTEM_PERMISSION",
                            Icon = "fa-desktop",
                            Name = "Quyền hạn",
                            ParentId = "SYSTEM",
                            SortOrder = 0,
                            Url = "/systems/permissions"
                        });
                });

            modelBuilder.Entity("Entities.Entities.Permission", b =>
                {
                    b.Property<string>("CommandId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FunctionId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CommandId", "RoleId", "FunctionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            CommandId = "CREATE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "DASHBOARD"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "DASHBOARD"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "DASHBOARD"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "DASHBOARD"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM_USER"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM_USER"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM_USER"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM_USER"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM_ROLE"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM_ROLE"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM_ROLE"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM_ROLE"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM_FUNCTION"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM_FUNCTION"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM_FUNCTION"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM_FUNCTION"
                        },
                        new
                        {
                            CommandId = "CREATE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM_PERMISSION"
                        },
                        new
                        {
                            CommandId = "UPDATE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM_PERMISSION"
                        },
                        new
                        {
                            CommandId = "DELETE",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM_PERMISSION"
                        },
                        new
                        {
                            CommandId = "VIEW",
                            RoleId = "2ba7403d-9288-4661-9450-5e27d0d5e183",
                            FunctionId = "SYSTEM_PERMISSION"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("Entities.Entities.CommandInFunction", b =>
                {
                    b.HasOne("Entities.Entities.Command", "Command")
                        .WithMany("CommandInFunctions")
                        .HasForeignKey("CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Entities.Function", "Function")
                        .WithMany("CommandInFunctions")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Command");

                    b.Navigation("Function");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Entities.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Entities.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Entities.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Entities.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Entities.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Entities.Command", b =>
                {
                    b.Navigation("CommandInFunctions");
                });

            modelBuilder.Entity("Entities.Entities.Function", b =>
                {
                    b.Navigation("CommandInFunctions");
                });
#pragma warning restore 612, 618
        }
    }
}
